user nginx nginx;
worker_processes 2;
error_log /var/log/nginx/error.log;
worker_rlimit_nofile 8192;

events {
    worker_connections 4096;
}

http {
        #writing a server directive(s) that proxies to the upstream application
        #proxy requests to the application using an upstream directive
	upstream application {
	    server 127.0.0.1:8000;
	}

	#Pass headers X-Forwarded-For and X-Real-IP to the upstream application
	proxy_set_header  X-Real-IP       $remote_addr;
	proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;

	server {
	    listen 80;

            #proxy requests to the application using an upstream directive
	    location / {
		proxy_pass http://application;
	    }
	    # All http requests should permanently redirect to their https equivalent
	    if ($scheme != "https") {
		rewrite ^ https://$host$uri permanent;
	    }
	    #SSL configuration - use provided cert and key
            #enable http/2
	    listen 443 ssl http2;
	    ssl on;
	    ssl_certificate /etc/nginx/ssl/self-signed.crt;
	    ssl_certificate_key /etc/nginx/ssl/self-signed.key;
            ssl_session_cache shared:SSL:10m;
            ssl_session_timeout  5m;

            #Disable Content Sniffing
            add_header X-Content-Type-Options nosniff; 
            #HSTS Http strict transport Security: force to use encrypted connection
            add_header Strict-Transport-Security "max-age=31536000; includeSubdomains"; 
            #Disable click jacking
            add_header X-Frame-Options DENY;

            # use modern, secure protocols and ciphers
	    ssl_prefer_server_ciphers On;
	    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	    ssl_ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS;
	    #disable token to prevent giving out any version info
	    server_tokens       off;
	}
}
